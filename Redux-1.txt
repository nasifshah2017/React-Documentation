Chapter-76: What is Redux

Redux is a State Management Tool. redux can also be called a library. It is a bunch of JavaScript
that someone else wrote to make our life as a developer easier. Redux is supposed to make our
lives easier. It is very cool when it is used in the proper way in the right place. It is absolutely a
beautiful thing that makes development easier. We know what State is, we have been using
State in the entire course, going all the way back to the first section. So, far we have done
Component based State Management. 
In the last section where we have been using the React Router we had a component called
Home and Home had a piece os State called Movie List, Home went out to the API, made 
an HTTP request and the API sent back some JSON and Home managed that inside of that
piece of state, and that is the State array. 

We did the same thing in our individual Movie component so we had the Movie component and
same like the Home component we sent request to th API, the API sent back the JSON and the
Movie component knew what it was doing. It managed its own state. Nobody knew what the
Movie List was inside the Home component, nobody knew what the Movie objects were, which 
was received in the JSON format in the Movie component. They managed themselves entirely. 

If we take a step back and look onto another project, if we go back to the AWS app, that was our
flashcard app or if we go back to our temperature app, where we had a component at the very 
and it was called the App component and the App component was connected to some more
components below it. In the case of the FlashCard, the App component rendered the QuizBar
component on the left and over the right hand side it rendered the FlashCard component. Then
inside of the FlashCard component we had another component that was rendered conditionally, 
it was either RegularCard or MultiCard or the RandomWeightedCard. 

So, in the QuizBar component something would happen, for example an action would happen
and that event would need to be known in the FlashCard component on the right, but we do have
a good way if we manage our State at the QuizBar component (on the left) to communicate with
the FlashCard component (on the right) because they are sibling components. 

That is why we move the state upto the App component (one level above the QuizBar and the
FlashCard component level) and then the App component filters it down to the QuizBar and the 
FlashCard components. It was brilliant, it was super easy, there were no problems with it and it
was a very good solution. 

				-------
				| App |
				-------
			   	   |
			   	   |
	-----------------------------------------------------------------										
	|								|
	|								|
    -------							     ---------
    | QB  |							     |  FC   |
    -------							     ---------
							
We are still managing state at a component level, it is not Application state at this point, because
even though it seems like QuizBar is changing, the app state is not. App manages its own state
and then the App component sends down a callback to let QuizBar know if something happens
then run this code, I will change my own state, you just run a little bit of code and that will be me 
updating the state but you do not worry as that is not your problem. 

It is a good solution but only when the application is small, but when we will be working for a big
company, and that company uses React, sooner or later the app will get bigger and complicated.
We will have something that will look absolutely crazy, where we have components everywhere,
and it is very possible to have a large application with hundreds of components on the screen at
the same time making up the UI and then something will happen at a very deep level of the
application that needs to be known at the very top level, then we will be in a very big trouble, 
because a lot of states will be changing at different component levels and all that would need to
be known at the very top level in the App component. Then it will get super bloated, it is going to
be an absolute disaster, we will be sending down call backs ten layers deep and it is going to be
changing state and component where we will have no idea of what it is doing and there will be no
way another developer is going to sit down and understand that. It is just going to be a total
disaster. 

This is where Redux is going to come into play. Redux is going to create something called the
'Store'. We will have this Store which is external to our application or it is outside of the 
component structure and it will create a pub sub type model where if something happens in a
particular component at a particular level then that component can update the Store. It can push
or publish that component to the store where something happened. Meanwhile something below
at the component-level needs to know about that, the that component can subscribe to the Store
and be notified when that tohing happened. 

This is a very simple overview of how React works with Redux. Redux is going to work like a
global store where we can keep application state, not component state because we are still 
going to use State as we had but we are still going to use redux, which is going to give us the
ability to put stuffs in a place from where any component can use it. If something happens at a 
very deep level then instead of sending at the top level by going through each level, we can just
directly put it in the Store, and the other component that needs to know about this change can 
just get it from the Store. 

Redux is for large applications. There is no way we are going to make an application of this size
that justifies redux in this course. It is going to be for a large app, but it is absolutely phenomenal
for managing application state in an easy and maintainable way that can be sealed over a long
period of time across a whole bunch of developers because it creates good uniformity of how the
whole application manages its states. 		         
