How Redux Works

In this lesson we are specifically going to look at how Redux does its things. We talked about how React and Redux interact with each other
through React-Redux. So, Redux has the Store, we already talked a lot about that. We have got an object inside the Store and that makes up
our application state. It can be as big or small as we want it to be. Again forget about React and forget about React-Redux. This is just
Redux doing its thing. The way that Redux works is that the store is informed by a bunch of little functions.

These are a bunch of anonymous functions.


Store {}			Functions
				() => {}
				() => {}
				() => {}


And we can have as many of these functions as we want and these functions are called Reducers. These Reducer functions each return a piece
of State. We are refering this piece of State as an empty object for now but that is what they do is that they return a piece of State, 
they can be of any data-type.


Store {}			Reducers
				() => {}
				() => {}
				() => {}


There can be lot of logics behind it, or there can be a tiny bit of logic whatever the case is, each of the little reducers return an 
object and whatever they return, will collectively make up the Store. The Store itself you do not put anything in there, we never mess with
the Store directly, we never update the Store directly instead we use these Reducers, they are functions those return a piece of State and
then Redux will handle updating the Store. 

It is similar to "this.setState()", we never ever mess directly with State in React, we never mess with Store directly in Redux, we use 
these Reducers, and these Reducers return little pieces of State. Their own little pieces of State and all of those things together 
collectively makes up the Store. 

The Reducers are not built into Redux, they are functions that we are going to write, we are completely responsible for writing them and 
there are couple of rules on writing them, and we will deal with those rules when we actually write our Reducers but the Reducers are just
these tiny functions that we write and then these Reducers return State and all those pieces of State added together will create the entire
Store. 

You can think about the Store as a grocery store, or a hardware store. We can think of each of the Reducers as little departments. 


Store {}			Reducers
				() => {} Milk & Eggs
				() => {} Meats
				() => {} Produce


So, the first reducer could be the Milk and Eggs department, the second reducer could be the Meats department, the third reducer could be 
the Produce department. We need all the items from each of these departments (Reducers) individually to fill up the entire grocery store.
In order to update the Reducers we have Action Creators and we are going to write the Action Creators as well.

Action Creators are also little functions, they are little functions those create the Actions,


Store {}			Reducers
				() => {}
				() => {}
				() => {}

Action Creators

Actions


These four items that we have written here are four big terms when it comes to Redux. They are The Stores, Reducers, Action Creators and 
Actions. An Action is simply going to be a little object and there are rules surrounding the Actions but at the absolute bare minimum for 
an Action is that it is an object with atleast a property of "type", and as an example of value to this property we are going to put it as
AUTH.


Store {}			Reducers
				() => {}
				() => {}
				() => {}


Action Creators

Actions {

	type: AUTH
	
	}


We are using AUTH as just an example, do not worry about this as it does not make any difference right now, we are just using it as a 
placeholder. 

We can have other stuffs there but an Action is just very simple, a little object with a property of type. 

An Action Creator is a little function that makes an Action. So, to illustrate below we will show that Action Creators return Actions,

Store {}			Reducers
				() => {}
				() => {}
				() => {}

Action Creators () => Actions

Actions {
	
	type: AUTH

	}

So, Reducers are little functions those return States and those States are put into the Store, Action Creators are little functions those
return Actions. What is an Action? It is just an object with the "type" property, that is as complicated as it is, even though it is going
to feel complicated, that is really all there is to it. 

So, we have Action Creators and we have got Actions. The last piece to complete the set here is called the Dispatch. The Dispatch is a 
function that is built into Redux. This is something that we do not write or make. We write the Reducers entirely ourselves, we write the
Actions and the Action Creators entirely ourselves but we do not build the Store and we do not build the Dispatch. The Dispatch is provided
to us, it is part of the Store. 


Store {} 			Reducers
				() => {}
				() => {}
				() => {}

				Dispatch

Action Creators () => Action

Actions {
	
	type: AUTH

	}


The funcion of the Dispatch is to dispatch an Action. So, the Action Creator will make an Action, when the Action gets triggered,
the Action will go to the Dispatch and the Dispatch will let every Reducer know that something happened, in this case Dispatch will be 
like, hey! I got an object with the type of AUTH, I do not know if you care but I am just letting you know. 

Then each of the Reducer function will decide, that do I care about this Action? Do I care about this particular type? Ultimately, we are 
going to have payload in most of these Actions and here we will pretend that it is an array,


Store {}			Reducers
				() => {}
				() => {}
				() => {}

Action Creators () => Action

Actions {
	
	type: AUTH

	}

payload: []


Do not hung up on this one right now, do not worry about how it works, we are talking at a very high level as how it operates, when we will
code it out, we will have a better foundation. 

The Action Creator will fire off an Action and that Action will go to the Dispatch and then the Dispatch will send it out to each Reducer
because it has a type, each Reducer function will know what type of Action it is and then the Reducer will decide does it care about this
Action. If it does then it will get the payload from the Action and it will return a new piece of State to the Store but if it does not 
care about the Action then the Reducer will return an old piece of State to the Store. 

Whatever happens all the Reducer will get notified everytime an Action is sent off by an Action Creator, and that is how the Store is
updated. The Reducers return their little pieces of State. Those pieces of State end up creating one big object in the Store, just like 
a grocery store or a hardware store or whatever. The individual little Reducers will get notified everytime an Action happens via the 
Dispatch and then the Reducers can update themselves based on the payload or whatever but they will always know what type of Action it was
because of the type property in the Action's object. 