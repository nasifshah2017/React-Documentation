In this lesson we are going to talk about some do's and don't's on State, in order to set some 
groundwork it is very important that we learn some of these rules as early as possible, and it 
will make the road smoother going forward.

1. We import the React object from the React node module and we import the Component object which 
   is not the default export from the React node module and that is why it is inside curly braces,

	import React, {Component} from 'react';

2. We made it a class and it needs to be a class if we are going to use State, it needs to extend
   to the Component class in order to be a React component, otherwise it is just a regular class.

   Every class gets a constructor, it does not need to have one, but that constructor if it exists 
   then it will run the very first time when the Component is created. 

   The super() method has to be called inside the constructor(), that simply initializes the super()
   class inside the constructor() and then we build an instance variable, here we initialized the 
   "text" property, inside the "state" object, to the string "State In Action", and we are only allowed
   to initialize a "state" object property inside the constructor() method, but we are not allowed to 
   do that anywhere else and the reason for that is that React needs to do a whole bunch of stuffs when 
   the "state" changes, so instead of changing it ourselves by re-initializing the property inside the 
   "state" object, we hand it to React, and React runs its own method, does a whole bunch of stuffs and
   then it ultimately changes it for us. 

   If JavaScript is our only language then it might seem strange as why would we do something like this, in 
   object-oriented programming (OOP) this is called a Setter and a Setter is a function whose job is to
   mutate something, so if you want to change a variable then you tell me and I will change it for you 
   and you do not change it yourself. 
   
   We do not change it by calling an equal sign, we change it by calling the setState() method, and React 
   will go and change it for us. This is very important as there are so many pieces of React that will need
   to function based on state change and the setState() method will make sure that React knew it happened, 
   we always do other setState() method and we hand it an object for each property and then React will mutate
   the variable for us, we do not mutate it ourselves.

   The other thing that is important here is that inside the callback function setTimeout() we have a rocket
   function, if we used a regular function instead of a rocket function then we would have gotten an error
   telling us that, "this.setState()" is not a function, that is because the rocket function does not create a 
   new "this", so inside of the callback function, the "this" is same as the one we declared initially while
   defining our "state" object and that will be the class, the class has a method called setState(), but if we 
   turn the rocket function into a regular function, and use the "this" inside it, then that will create a new
   "this" and that "this" will not have a setState() method.

   It is very important to note the difference.

  
   class StateInAction extends Component{
		constructor(){
			super();
			this.state = {
				text: "State In Action"
			}

			setTimeout(()=>{
				this.setState({
					text: "State Changed!!"
				})
			}, 2000)
		}

  The render() method here is sort of self-explanatory, but we can access any state property, just like props,
  in this case, "this.state.text", we accessed it pretty much the same way,

	render(){
		return (
			<h1>{this.state.text}</h1>
		);
	}

  We can mingle the two and write,

	render(){
		return (
			<h1>{this.state.text} - {this.props.name}</h1>
		)
	}

 App.js

 import React, {Component} from 'react';
 import './App.css';
 import StateInAction from './StateInAction';

 class App extends Component {
	render(){
		return (
			<div className="App">
				<h1>State Check!</h1>
				<StateInAction name="Rob"/>
			</div>
		);
	}
}

export default App;

Output:

	State Check!
	State In Action - Rob

	State Check!
	State Changed!! - Rob
